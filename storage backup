# Use cases/ Test cases:
# 1. Only backup current date's folder and not older folders. And delete older date's folder > X days locally
# 2. Delete cloud backups older than X days 
# 3. Verify that the backup succeeded.
# 4. Notification on success/ failure in UI, Email
# 5. Trace logging to a text file.
# 6. Read configuration values from XML/ JSON
$storageAccountName = "chillbotbackuptest"
$storageAccountKey = "B717Tdc8MU+sM47MKmaXI09H/+VI3pJgDdokzJyz28hZqgXTx9gGiFY8+25yIKWs9o2J+1ueN1eh+ASttQ9o7A=="
$containerName = "chillbotbackuptest"

# Set the local backup folder path
$localBackupFolder = "C:\SAPBackup"

# Create a folder with today's date for the backup
$backupFolder = Join-Path -Path $localBackupFolder -ChildPath (Get-Date -Format "yyyyMMdd")

# # Create the backup folder if it doesn't exist
# if (-not (Test-Path -Path $backupFolder)) {
#     New-Item -Path $backupFolder -ItemType Directory
# }

# Perform the backup operation here, replace with your SAP backup command
# For example:
# Invoke-SapBackupCommand -BackupPath $backupFolder

# Upload the backup to Azure Blob Storage
$storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey
$backupFiles = Get-ChildItem -Path $backupFolder
foreach ($file in $backupFiles) {
    $blobName = "$backupFolder/$($file.Name)"
    Set-AzStorageBlobContent -File $file.FullName -Container $containerName -Blob $blobName -Context $storageContext -Force
}

# Get a list of all blobs in the container
$blobs = Get-AzStorageBlob -Container $containerName -Context $storageContext

# Calculate the date threshold for deleting old backups (5 days ago)
$deleteThreshold = (Get-Date).AddDays(-5)

# Delete backups older than 5 days
foreach ($blob in $blobs) {
    $blobDate = [DateTime]::Parse($blob.Name.Substring(0, 8))
    if ($blobDate -lt $deleteThreshold) {
        Remove-AzStorageBlob -Container $containerName -Blob $blob.Name -Context $storageContext -Force
    }
}

